 CREATE TABLE employee (
  emp_id INT NOT NULL,
  first_name VARCHAR(40) DEFAULT NULL,
  last_name VARCHAR(40) DEFAULT NULL,
  birth_day DATE DEFAULT NULL,
  sex VARCHAR(1) DEFAULT NULL,
  salary INT DEFAULT NULL,
  super_id INT DEFAULT NULL,
  branch_id INT DEFAULT NULL,
  PRIMARY KEY (emp_id),
  KEY branch_id (branch_id),
  KEY super_id (super_id),
  CONSTRAINT employee_ibfk_1 FOREIGN KEY (branch_id) REFERENCES branch (branch_id) ON DELETE SET NULL,
  CONSTRAINT employee_ibfk_2 FOREIGN KEY (`super_id`) REFERENCES employee (`emp_id`) ON DELETE SET NULL
CREATE TABLE Product (
  id INT NOT NULL,
  name VARCHAR(255) DEFAULT NULL,
  `category` enum('electronics','clothing','home_goods') DEFAULT NULL,
  PRIMARY KEY (`id`)
)
DELETE FROM branch
WHERE branch_id = 4;


CREATE TABLE `branch_supplier` (
  `branch_id` INT NOT NULL,
  `supplier_name` VARCHAR(40) NOT NULL,
  `supply_type` VARCHAR(40) DEFAULT NULL,
  PRIMARY KEY (`branch_id`,`supplier_name`),
  CONSTRAINT `branch_supplier_ibfk_1` FOREIGN KEY (`branch_id`) REFERENCES `branch` (`branch_id`) ON DELETE CASCADE
)


CREATE TABLE `branch` (
  `branch_id` INT NOT NULL,
  `branch_name` VARCHAR(40) DEFAULT NULL,
  `mgr_id` INT DEFAULT NULL,
  `mgr_start_DATE` DATE DEFAULT NULL,
  PRIMARY KEY (`branch_id`),
  KEY `mgr_id` (`mgr_id`),
  CONSTRAINT `branch_ibfk_1` FOREIGN KEY (`mgr_id`) REFERENCES `employee` (`emp_id`) ON DELETE SET NULL
)


CREATE TABLE `client` (
  `client_id` INT NOT NULL,
  `client_name` VARCHAR(40) DEFAULT NULL,
  `branch_id` INT DEFAULT NULL,
  PRIMARY KEY (`client_id`),
  KEY `branch_id` (`branch_id`),
  CONSTRAINT `client_ibfk_1` FOREIGN KEY (`branch_id`) REFERENCES `branch` (`branch_id`) ON DELETE SET NULL
) 


CREATE TABLE `works_with` (
  `emp_id` INT NOT NULL,
  `client_id` INT NOT NULL,
  `total_sales` INT DEFAULT NULL,
  PRIMARY KEY (`emp_id`,`client_id`),
  KEY `client_id` (`client_id`),
  CONSTRAINT `works_with_ibfk_1` FOREIGN KEY (`emp_id`) REFERENCES `employee` (`emp_id`) ON DELETE CASCADE,
  CONSTRAINT `works_with_ibfk_2` FOREIGN KEY (`client_id`) REFERENCES `client` (`client_id`) ON DELETE CASCADE
)


trigger_test | CREATE TABLE `trigger_test` (
  `message` VARCHAR(100) DEFAULT NULL
) 
SELECT *
FROM employee
LEFT OUTER JOIN works_with
   ON employee.emp_id = works_with.emp_id;


SELECT * 
FROM employee
JOIN works_with
   ON employee.emp_id = works_with.emp_id;

SELECT employee.emp_id, first_name, last_name, branch_id, client_id, total_sales
FROM employee
JOIN works_with
    ON employee.emp_id = works_with.emp_id;

FROM employee
LEFT OUTER JOIN works_with
    ON employee.emp_id = works_with.emp_id;
SELECT employee.emp_id, first_name, last_name, branch_id, client_id, total_sales
FROM employee
RIGHT OUTER JOIN works_with
    ON employee.emp_id = works_with.emp_id;
SELECT employee.emp_id, first_name, last_name, branch_id, salary, client_id, total_sales
FROM employee
JOIN works_with
   ON employee.emp_id = works_with.emp_id
WHERE first_name <> 'Michael'AND branch_id = 2
ORDER BY salary DESC;

SELECT * FROM branch;
SELECT * FROM employee
UNION
SELECT * FROM works_with;
SELECT client_id, client_name, branch_id
FROM client
UNION
SELECT client_id, emp_id, total_sales
FROM works_with;
 -- Case Statement
SELECT first_name, last_name, birth_day,
CASE
   
    WHEN birth_day BETWEEN 1/1/1957 AND 1/1/1969 THEN 'Retired'
    ELSE 'Old'
END 
FROM employee
ORDER BY birth_day;
-- REVISIT. Use branch table.

SELECT first_name, last_name, salary,
CASE  
    WHEN branch_id = 2 THEN salary + (salary * .10)
    WHEN branch_id = 1 THEN salary + (salary * .01)
    ELSE salary + (salary * .03)
END AS SalaryAfterRaise
FROM employee;
UPDATE branch
SET mgr_id = 101
WHERE branch_id = 4;
DELETE FROM branch
WHERE branch_id = 4;


-- Partition By
SELECT first_name, last_name, salary, sex,COUNT(sex) OVER (PARTITION BY sex) AS TotalGender
FROM employee
JOIN works_with
   ON employee.emp_id = works_with.emp_id;
   
   
-- Aliasing
SELECT Demo.emp_id, Sales.total_sales
FROM employee AS Demo
JOIN works_with AS Sales
   ON Demo.emp_id = Sales.emp_id;


-- EVENTS
DELIMITER $$
CREATE EVENT delete_retirees
ON SCHEDULE EVERY 100 SECOND
DO
BEGIN 
   DELETE 
   FROM employee
   WHERE birth_day > 01/01/1970;
END $$
DELIMITER ;

-- Troubleshoot Event Failure
SHOW VARIABLES LIKE 'event%';


-- CTE's in MySQL
-- Temporary, can only be used when first created

WITH CTE_Example AS
(
SELECT sex, AVG(salary) avg_sal, MAX(salary) max_sal, MIN(salary) min_sal, COUNT(salary) count_sal, AVG(total_sales) avg_sales
FROM employee
JOIN works_with
    ON employee.emp_id = works_with.emp_id
GROUP BY sex
)
SELECT *
FROM CTE_Example;
-- Alternative using a Subquery
SELECT *
FROM (
SELECT sex, AVG(salary) avg_sal, MAX(salary) max_sal, MIN(salary) min_sal, COUNT(salary) count_sal, AVG(total_sales) avg_sales
FROM employee
JOIN works_with
    ON employee.emp_id = works_with.emp_id
GROUP BY sex
) example_subquery
;
-- Multiple CTE's

WITH CTE_Example AS 
(
SELECT emp_id, sex, birth_day, salary
FROM employee
WHERE birth_day < DATE '1970-01-01'
),
CTE_Example2 AS
(
SELECT emp_id, total_sales
FROM works_with
WHERE total_sales > 10000
)
SELECT *
FROM CTE_Example
JOIN CTE_Example2
   ON CTE_Example.emp_id = CTE_Example2.emp_id
;

-- Temporary Tables
-- Only visible to the session they are created in 

CREATE TEMPORARY TABLE temp_table
(
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    fave_movie VARCHAR(100)
);
SELECT *
FROM temp_table;
INSERT INTO temp_table
VALUES('Dan', 'Muiru', 'Old Guard' );

CREATE TEMPORARY TABLE salary_over_70k
SELECT *
FROM employee
WHERE salary >= 70000;
SELECT *
FROM salary_over_70k;
-- Stored Procedures

CREATE PROCEDURE large_salaries()
SELECT *
FROM employee
WHERE salary >= 70000;
CALL large_salaries();
USE testdb;
DROP PROCEDURE IF EXISTS `large_salaries`;

DELIMITER $$
USE testdb $$
CREATE PROCEDURE `large_salaries`()
BEGIN
   SELECT *
   FROM employee
   WHERE salary >= 70000;
   SELECT *
   FROM employee
   WHERE salary <= 60000;
END $$

DELIMITER ;
CALL large_salaries();
-- Parameters in Procedures
-- Variables passed as input to stored procedures

DELIMITER $$
CREATE PROCEDURE large_sales(emp_id_param INT)
BEGIN 
    SELECT total_sales
    FROM works_with
    WHERE emp_id = emp_id_param;
END $$
DELIMITER ;

CALL large_sales(102);